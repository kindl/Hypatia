module Common.Base

import Native(Numeral, Text, Array,
    (^), (-), (+),
    geti, size, isArray, coerce,
    eq, lt,
    True, False)

sqrt x = x ^ 0.5

getn n = geti (n - 1)

# Comparison
infix 9 == equals

infixl 4 < lessThan
infixl 4 > greaterThan
infixl 4 <= lessOrEqal
infixl 4 >= greaterOrEqal

equals l r = genComp eq l r

lessThan l r = genComp lt l r

# Generic comparison
genComp comp l r =
    if comp l r
        then True
        else trySeqComp (genComp comp) l r

trySeqComp comp l r =
    if bothArray l r
        then seqComp comp (coerce l) (coerce r)
        else False

bothArray l r =
    if isArray l
        then isArray r
        else False

seqComp comp l r =
    let
        lsize = size l
        rsize = size r
    in if eq lsize rsize
        then seqCompAux comp 0 lsize l r
        else False

seqCompAux comp i maxN l r =
    if eq i maxN
        then True
        else (if comp (geti i l) (geti i r)
            then seqCompAux comp (i + 1) maxN l r
            else False)

notEq a b = not_ (equals a b)

repeatN f n =
    if eq n 0 then Unit
        else let { _ = f Unit } in repeatN f (n - 1)

# not is a keyword in lua
not_ True = False
not_ False = True

boolToString False = "False"
boolToString True = "True"


type Option a = None | A a

type Unit = Unit

type Tuple a b = Tuple a b


# Functions
fix f x = f (fix f) x

flip f x y = f y x

identity x = x

infixr 0 <| apply

apply f x = f x

infixl 0 |> reverseApply

reverseApply x f = f x

infixr 9 >> compose

compose f g x = f (g x)

infixr 9 << reverseCompose

reverseCompose = flip compose
