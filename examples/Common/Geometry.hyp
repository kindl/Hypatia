module Common.Geometry

import Common.Base((+), (*), (/), (-),
    negate, sqrt, sin, cos, Tuple)


# Vectors
type Vector a = Vec4 a a a a

to2d (Vec4 x y _ w) = Tuple (x / w) (y / w)

scale f (Vec4 a b c d) = 
    Vec4 (f * a) (f * b) (f * c) (f * d)

dot (Vec4 a b c d) (Vec4 e f g h) =
    (a * e) + (b * f) + (c * g) + (d * h)

length v = sqrt (dot v v)

normalize v = scale (1 / length v) v

transform (Mat4 a b c d) v =
    Vec4 (dot a v) (dot b v) (dot c v) (dot d v)

# Matrices
type Matrix a = Mat4 (Vector a) (Vector a) (Vector a) (Vector a)

transpose (Mat4 (Vec4 x1 x2 x3 x4) (Vec4 y1 y2 y3 y4)
    (Vec4 z1 z2 z3 z4) (Vec4 w1 w2 w3 w4)) =
        Mat4 (Vec4 x1 y1 z1 w1) (Vec4 x2 y2 z2 w2)
             (Vec4 x3 y3 z3 w3) (Vec4 x4 y4 z4 w4)

multiply (Mat4 a b c d) m =
    case transpose m of
        Mat4 e f g h -> Mat4
            (Vec4 (dot a e) (dot a f) (dot a g) (dot a h))
            (Vec4 (dot b e) (dot b f) (dot b g) (dot b h))
            (Vec4 (dot c e) (dot c f) (dot c g) (dot c h))
            (Vec4 (dot d e) (dot d f) (dot d g) (dot d h))

perspectiveMatrix top right near far =
    let
        a = near / right
        b = near / top
        c = -(far + near) / (far - near)
        d = -(2 * far * near) / (far - near)
        e = -1
    in Mat4
            (Vec4 a 0 0 0)
            (Vec4 0 b 0 0)
            (Vec4 0 0 c d)
            (Vec4 0 0 e 0)

simpleProjectionMatrix c =
    let
        d = -1 / c
    in Mat4
            (Vec4 1 0 0 0)
            (Vec4 0 1 0 0)
            (Vec4 0 0 1 0)
            (Vec4 0 0 d 1)

scaleMatrix f =
    Mat4
        (Vec4 f 0 0 0)
        (Vec4 0 f 0 0)
        (Vec4 0 0 f 0)
        (Vec4 0 0 0 1)

translateMatrix x y z =
    Mat4
        (Vec4 1 0 0 x)
        (Vec4 0 1 0 y)
        (Vec4 0 0 1 z)
        (Vec4 0 0 0 1)

rotationX angle =
    let
        s = sin angle
        c = cos angle
        x = -s
    in Mat4
        (Vec4 1 0 0 0)
        (Vec4 0 c x 0)
        (Vec4 0 s c 0)
        (Vec4 0 0 0 1)

rotationY angle =
    let
        s = sin angle
        c = cos angle
        x = -s
    in Mat4
        (Vec4 c 0 s 0)
        (Vec4 0 1 0 0)
        (Vec4 x 0 c 0)
        (Vec4 0 0 0 1)

rotationZ angle =
    let
        s = sin angle
        c = cos angle
        x = -s
    in Mat4
        (Vec4 c x 0 0)
        (Vec4 s c 0 0)
        (Vec4 0 0 1 0)
        (Vec4 0 0 0 1)
