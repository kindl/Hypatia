module Common.State

import Native
import Common.Base(Tuple2, Unit, identity, first)


type StateT s f a = StateT (s -> f (Tuple2 a s))


runStateT (StateT f) a = f a


defer f = StateT (\s -> runStateT (f Unit) s)

pointWith fpoint a = StateT (\input -> fpoint (Tuple2 a input))

liftWith : ((a -> b) -> f a -> f b) -> f a -> StateT state f a
liftWith fmap fa = StateT (\input -> fmap (Tuple2 input) fa)

mapWith : ((a -> b) -> f a -> f b)
    -> (x -> y)
    -> StateT s f x
    -> StateT s f y
mapWith fmap f p = StateT (\input -> fmap (first f) (runStateT p input))

map2With : (a -> f a)
    -> (f a -> (a -> f b) -> f b)
    -> (x -> y -> z)
    -> StateT s f x
    -> StateT s f y
    -> StateT s f z
map2With fpoint fbind f p1 p2 =
    StateT (\s1 ->
        fbind (runStateT p1 s1) (\(Tuple2 a s2) ->
        fbind (runStateT p2 s2) (\(Tuple2 b s3) ->
            fpoint (Tuple2 (f a b) s3))))

applyWith fpoint fbind p1 p2 = map2With fpoint fbind identity p1 p2

map3With fpoint fbind f p1 p2 p3 = applyWith fpoint fbind (map2With fpoint fbind f p1 p2) p3

map4With fpoint fbind f p1 p2 p3 p4 = applyWith fpoint fbind (map3With fpoint fbind f p1 p2 p3) p4
