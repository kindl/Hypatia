module Common.Stateful

import Native(unsafeCoerce, unsafeSet, Array)
import Common.Base(Unit, compose, flip)


type Stateful s

# Similar to purescript-effect the computation is modeled
# after a function of type Unit -> s
unsafeStateful : (Unit -> s) -> Stateful s
unsafeStateful = unsafeCoerce

unsafeRun : Stateful s -> s
unsafeRun f = unsafeCoerce f Unit

# Sequential composition
# andThen f g = unsafeRun (f (unsafeRun g))
# Would run the computation directly
# The following version returns a function
andThen f g = unsafeStateful (fun _ ->
    unsafeRun (f (unsafeRun g)))

bind = flip andThen

map f = andThen (compose point f)

# Usually called return, but renamed
# because return is a reserved word in Lua
point x = unsafeStateful (fun _ -> x)

# Refs
# Objects and arrays in JS, as well as tables in Lua are passed by reference,
# meaning if different functions receive an object in JS
# then both modify the same object.
# Here, a Ref is a type constructor with one value
# which is represented as the array [Mkref, t]
# and will therefore be passed by reference.
# (In purescript-refs references are JS objects.)
type Ref t = MkRef t

# The constructor MkRef is opaque and should not be imported
unsafeMakeRef x = MkRef x

unsafeUnpackRef (MkRef x) = x

newRef x = point (unsafeMakeRef x)

readRef r = point (unsafeUnpackRef r)

# Because the type constructor (Mkref t) is represented as the array [Mkref, t],
# writing a reference means reinterpreting it as an array
# and setting the inner value
writeRef r x = unsafeStateful (fun _ ->
    let
        toArray : Ref t -> Array t
        toArray = unsafeCoerce
        _ = unsafeSet (toArray r) 1 x
    in Unit)

modifyRef r f = writeRef r (f (unsafeUnpackRef r))
