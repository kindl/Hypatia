module Common.Stateful

import Native(coerce, modifyRef, Stateful)
import Common.Base(Unit, compose)

# Similar to purescript-effect the computation is modeled
# after a function of type Unit -> s
unsafeStateful : (Unit -> s) -> Stateful s
unsafeStateful = coerce

unsafeRun : Stateful s -> s
unsafeRun f = coerce f Unit

# Returns a function.
# andThen f g = unsafeRun (f (unsafeRun g))
# Would run the computation directly
andThen f g = unsafeStateful (fun _ ->
    unsafeRun (f (unsafeRun g)))

map f = andThen (compose point f)

# Usually called return, but renamed
# because return is a reserved word in Lua
point x = unsafeStateful (fun _ -> x)

#Refs
# Objects in JS and tables in Lua are passed by reference
# meaning, if different functions receive an object in JS
# then both modify the same object
# Therefore in purescript-refs references are JS objects
# Here references are realised with a type
type Ref t = MkRef t

# The constructor MkRef is opaque and should not be imported
unsafeMakeRef x = MkRef x

unsafeUnpackRef (MkRef x) = x

newRef x = point (unsafeMakeRef x)

readRef r = point (unsafeUnpackRef r)

writeRef r x = modifyRef r (fun _ -> x)
