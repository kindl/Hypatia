module Common.Stateful

import Native(unsafeSet, Array)
import Common.Base(Unit, compose, always)


// Similar to purescript-effect a stateful computation
// is modeled after a function of type Unit -> s
type Stateful s = InternalStateful (Unit -> s)

unsafeStateful = InternalStateful

unsafeRun (InternalStateful f) = f Unit

// Sequential composition
// `andThen f g = unsafeRun (f (unsafeRun g))`
// Would run the computation directly
// The following version returns a function
andThen f g = unsafeStateful (\_ ->
    unsafeRun (f (unsafeRun g)))

bind m f = andThen f m

map f = andThen (compose point f)

// Usually called return, but renamed
// because return is a reserved word in Lua
point x = unsafeStateful (\_ -> x)

// Refs
// Objects and arrays in JS, as well as tables in Lua are passed by reference,
// meaning if different functions receive an object in JS
// then both modify the same object.
// Here, a Ref is a type constructor with an array
// that will be passed by reference.
type Ref t = InternalRef (Array t)

// The constructor InternalRef should not be imported.
// If necessary, import `unsafeMakeRef` instead.
unsafeMakeRef x = InternalRef [x]

unsafeUnpackRef (InternalRef [x]) = x


newRef x = point (unsafeMakeRef x)

readRef r = point (unsafeUnpackRef r)

writeRef (InternalRef r) x = unsafeStateful (\_ ->
    always Unit (unsafeSet r 0 x))

modifyRef r f = writeRef r (f (unsafeUnpackRef r))
