module Geometry.Matrix

import Native((+), (*), (/), (-), sin, cos)
import Geometry.Vector4(Vector4)
import Geometry.Vector3(Vector3)
import Geometry.Vector3 as Vector3


infixl 7 @ multiply


type Matrix a =
    Matrix
        a a a a
        a a a a
        a a a a
        a a a a


transform
    (Matrix a b c d e f g h i j k l m n o p)
    (Vector4 x y z w) =
        Vector4
            (a * x + b * y + c * z + d * w)
            (e * x + f * y + g * z + h * w)
            (i * x + j * y + k * z + l * w)
            (m * x + n * y + o * z + p * w)

transpose (Matrix a b c d e f g h i j k l m n o p) =
    Matrix
        a e i m
        b f j n
        c g k o
        d h l p

add
    (Matrix a1 b1 c1 d1 e1 f1 g1 h1 i1 j1 k1 l1 m1 n1 o1 p1)
    (Matrix a2 b2 c2 d2 e2 f2 g2 h2 i2 j2 k2 l2 m2 n2 o2 p2) =
        Matrix
            (a1 + a2) (b1 + b2) (c1 + c2) (d1 + d2)
            (e1 + e2) (f1 + f2) (g1 + g2) (h1 + h2)
            (i1 + i2) (j1 + j2) (k1 + k2) (l1 + l2)
            (m1 + m2) (n1 + n2) (o1 + o2) (p1 + p2)

subtract
    (Matrix a1 b1 c1 d1 e1 f1 g1 h1 i1 j1 k1 l1 m1 n1 o1 p1)
    (Matrix a2 b2 c2 d2 e2 f2 g2 h2 i2 j2 k2 l2 m2 n2 o2 p2) =
        Matrix
            (a1 - a2) (b1 - b2) (c1 - c2) (d1 - d2)
            (e1 - e2) (f1 - f2) (g1 - g2) (h1 - h2)
            (i1 - i2) (j1 - j2) (k1 - k2) (l1 - l2)
            (m1 - m2) (n1 - n2) (o1 - o2) (p1 - p2)

multiply
    (Matrix a1 b1 c1 d1 e1 f1 g1 h1 i1 j1 k1 l1 m1 n1 o1 p1)
    (Matrix a2 b2 c2 d2 e2 f2 g2 h2 i2 j2 k2 l2 m2 n2 o2 p2) =
        Matrix
            (a1 * a2 + b1 * e2 + c1 * i2 + d1 * m2)
            (a1 * b2 + b1 * f2 + c1 * j2 + d1 * n2)
            (a1 * c2 + b1 * g2 + c1 * k2 + d1 * o2)
            (a1 * d2 + b1 * h2 + c1 * l2 + d1 * p2)
            (e1 * a2 + f1 * e2 + g1 * i2 + h1 * m2)
            (e1 * b2 + f1 * f2 + g1 * j2 + h1 * n2)
            (e1 * c2 + f1 * g2 + g1 * k2 + h1 * o2)
            (e1 * d2 + f1 * h2 + g1 * l2 + h1 * p2)
            (i1 * a2 + j1 * e2 + k1 * i2 + l1 * m2)
            (i1 * b2 + j1 * f2 + k1 * j2 + l1 * n2)
            (i1 * c2 + j1 * g2 + k1 * k2 + l1 * o2)
            (i1 * d2 + j1 * h2 + k1 * l2 + l1 * p2)
            (m1 * a2 + n1 * e2 + o1 * i2 + p1 * m2)
            (m1 * b2 + n1 * f2 + o1 * j2 + p1 * n2)
            (m1 * c2 + n1 * g2 + o1 * k2 + p1 * o2)
            (m1 * d2 + n1 * h2 + o1 * l2 + p1 * p2)

toArray (Matrix a b c d e f g h i j k l m n o p) =
    [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p]

identity = scale 1

perspective top right near far =
    let
        a = near / right
        b = near / top
        c = -(far + near) / (far - near)
        d = -2 * far * near / (far - near)
        e = -1
    in Matrix
        a 0 0 0
        0 b 0 0
        0 0 c d
        0 0 e 0

simpleProjection c =
    let
        d = -1 / c
    in Matrix
        1 0 0 0
        0 1 0 0
        0 0 1 0
        0 0 d 1

scale f =
    Matrix
        f 0 0 0
        0 f 0 0
        0 0 f 0
        0 0 0 1

translation x y z =
    Matrix
        1 0 0 x
        0 1 0 y
        0 0 1 z
        0 0 0 1

rotationX angle =
    let
        s = sin angle
        c = cos angle
    in Matrix
        1 0 0 0
        0 c (-s) 0
        0 s c 0
        0 0 0 1

rotationY angle =
    let
        s = sin angle
        c = cos angle
    in Matrix
        c 0 s 0
        0 1 0 0
        (-s) 0 c 0
        0 0 0 1

rotationZ angle =
    let
        s = sin angle
        c = cos angle
    in Matrix
        c (-s) 0 0
        s c 0 0
        0 0 1 0
        0 0 0 1

rotation angleX angleY angleZ =
    let
        sx = sin angleX
        cx = cos angleX
        sy = sin angleY
        cy = cos angleY
        sz = sin angleZ
        cz = cos angleZ
    in Matrix
        (cy * cz) (-cy * sz) sy 0
        (cx * sz + sx * sy * cz) (cx * cz - sx * sy * sz) (-sx * cy) 0
        (sx * sz - cx * sy * cz) (sx * cz + cx * sy * sz) (cx * cy)  0
        0 0 0 1

lookAt eye at up =
    let
        forward = Vector3.normalize (Vector3.subtract at eye)
    in look eye forward up

look eye forward up =
    let
        (right alias Vector3 a b c) = Vector3.normalize (Vector3.cross up forward)
        (upward alias Vector3 e f g) = Vector3.cross forward right
        (backward alias Vector3 i j k) = Vector3.scale -1 forward

        d = -(Vector3.dot right eye)
        h = -(Vector3.dot upward eye)
        l = -(Vector3.dot forward eye)
    in Matrix
        a b c d
        e f g h
        i j k l
        0 0 0 1

viewport width height =
    let
        depth = 1
    in Matrix
        (width / 2) 0 0 (width / 2)
        // flipped y-axis
        0 (-height / 2) 0 (height / 2)
        0 0 (depth / 2) (depth / 2)
        0 0 0 1
