module Spheres

import Native((+), (*), (%), (-),
    write, toString, geti, uncurry4, uncurry5, modifyRef, Array)
import Native.Love(random, setColor, circle, getWidth, getHeight)
import Common.Base(Unit, Numeral,
    (<),
    sqrt, repeatN)
import Common.Stateful(unsafeMakeRef, unsafeRun,
    writeRef, readRef, Ref)
import Common.Array(map, insert)


gameState : Ref (Array Sphere)
gameState = unsafeMakeRef []

modifyState f = unsafeRun (modifyRef gameState f)

setColorVec (Vec3 c1 c2 c3) = setColor c1 c2 c3

circleVec (Vec2 x y) r = circle "fill" x y r

drawSphere sphere = let {
    _ = setColorVec (color sphere)
        } in circleVec (position sphere) (radius sphere)

type Vector a = Vec2 a a | Vec3 a a a

alias Position = Spheres.Vector Native.Numeral
alias Velocity = Spheres.Vector Native.Numeral
alias Color = Spheres.Vector Native.Numeral
alias Radius = Native.Numeral

type Sphere = Sphere Position Velocity Color Radius

color (Sphere _ _ c _) = c

position (Sphere p _ _ _) = p

radius (Sphere _ _ _ r) = r

addSphere spheres =
    let
        pos = Vec2 (random 0 500) (random 0 500)
        vel = Vec2 (random (-100) 100) (random (-100) 100)
        col = Vec3 (random 0 255) (random 0 255) (random 0 255)
        rad = random 30 100
    in insert spheres (Sphere pos vel col rad)

load _ =
    let
        state = []
        _ = repeatN (fun _ -> addSphere state) 10
    in modifyState (fun _ -> state)

update dt = modifyState (map (updateSphere dt))

updateSphere dt (Sphere p v c r) =
    Sphere (updatePosition p v dt) v c r

updatePosition (Vec2 x y) (Vec2 vx vy) dt =
    let
        nx = (x + vx * dt) % unsafeRun getWidth
        ny = (y + vy * dt) % unsafeRun getHeight
    in Vec2 nx ny

mousepressed = uncurry4 mousepressedC

mousepressedC x y button isTouch =
    modifyState (map (hideSphere (Vec2 x y)))

mousemoved = uncurry5 mousemovedC

mousemovedC x y dx dy isTouch =
    modifyState (map (moveSphere (Vec2 x y)))

moveSphere screenPos (s alias Sphere p v c r) =
    if distance p screenPos < r
        then Sphere screenPos v c r
        else s

hideSphere screenPos (s alias Sphere p v c r) =
    if distance p screenPos < r
        then Sphere p v c 0
        else s


add (Vec2 a b) (Vec2 c d) =
    Vec2 (a + c) (b + d)

sub (Vec2 a b) (Vec2 c d) =
    Vec2 (a - c) (b - d)

dot (Vec2 a b) (Vec2 c d) =
    (a * c) + (b * d)

distance vec1 vec2 = length (sub vec1 vec2)

length vec = sqrt (dot vec vec)

draw _ = modifyState (fun s -> let { _ = map drawSphere s } in s)
