module Spheres

import Common.Base(Unit, Numeral,
    (+), (*), (%), (<), (-),
    sqrt, write, toString, repeatN, geti)
import Common.Array(Array, map, insert)


random : Numeral -> Numeral -> Numeral

getWidth : Unit -> Numeral

getHeight : Unit -> Numeral

getState : Unit -> Array Sphere

setState : Array Sphere -> Unit

uncurry2 : a -> b -> c -> Native.Fun2 a b c

uncurry3 : a -> b -> c -> d -> Native.Fun3 a b c d

uncurry4 : a -> b -> c -> d -> e -> Native.Fun4 a b c d e

uncurry5 : a -> b -> c -> d -> e -> f -> Native.Fun5 a b c d e f

# Drawing
setColor : Vector Numeral -> Unit

circle : Vector Numeral -> Numeral -> Unit

drawSphere sphere = let {
    _ = setColor (color sphere)
        } in circle (position sphere) (radius sphere)

type Vector a = Vec2 a a | Vec3 a a a

alias Position = Vector Native.Numeral
alias Velocity = Vector Native.Numeral
alias Color = Vector Native.Numeral
alias Radius = Native.Numeral

type Sphere = Sphere Position Velocity Color Radius

color (Sphere _ _ c _) = c

position (Sphere p _ _ _) = p

radius (Sphere _ _ _ r) = r

addSphere spheres =
    let
        pos = Vec2 (random 0 500) (random 0 500)
        vel = Vec2 (random (-100) 100) (random (-100) 100)
        col = Vec3 (random 0 255) (random 0 255) (random 0 255)
        rad = random 30 100
    in insert spheres (Sphere pos vel col rad)

load _ =
    let
        state = []
        _ = repeatN (fun _ -> addSphere state) 10
    in setState state

update dt = modifyState (map (updateSphere dt))

updateSphere dt (Sphere p v c r) =
    Sphere (updatePosition p v dt) v c r

updatePosition (Vec2 x y) (Vec2 vx vy) dt =
    let
        nx = (x + vx * dt) % getWidth Unit
        ny = (y + vy * dt) % getHeight Unit
    in Vec2 nx ny

mousepressed = uncurry4 mousepressedC

mousepressedC x y button isTouch =
    modifyState (map (hideSphere (Vec2 x y)))

mousemoved = uncurry5 mousemovedC

#TODO

mousemovedC x y dx dy isTouch =
    modifyState (map (moveSphere (Vec2 x y)))

moveSphere screenPos (Sphere p v c r) =
    if distance p screenPos < r
        then Sphere screenPos v c r
        else Sphere p v c r

hideSphere screenPos (Sphere p v c r) =
    if distance p screenPos < r
        then Sphere p v c 0
        else Sphere p v c r


add (Vec2 a b) (Vec2 c d) =
    Vec2 (a + c) (b + d)

sub (Vec2 a b) (Vec2 c d) =
    Vec2 (a - c) (b - d)

dot (Vec2 a b) (Vec2 c d) =
    (a * c) + (b * d)

distance vec1 vec2 = length (sub vec1 vec2)

length vec = sqrt (dot vec vec)

draw _ = map drawSphere (getState Unit)

modifyState f = setState (f (getState Unit))
