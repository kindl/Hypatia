module Spheres

import Native((+), (*), (%), (-), (/),
    uncurry4, uncurry5, Array, unsafeInsert, Numeral)
import Native.Love(unsafeRandom, setColor, circle, getWidth, getHeight)
import Common.Base((<), sqrt, repeatN)
import Common.Stateful(unsafeMakeRef, unsafeRun, modifyRef, Ref)
import Common.Array(map)
import Geometry.Vector2(Vector2, add, subtract, dot, length, distance)
import Geometry.Vector3(Vector3)


gameState : Ref (Array Sphere)
gameState = unsafeMakeRef []

modifyState f = unsafeRun (modifyRef gameState f)

setColorVec (Vector3 c1 c2 c3) = setColor c1 c2 c3

circleVec (Vector2 x y) r = circle "fill" x y r

drawSphere sphere =
    let
        _ = setColorVec (color sphere)
    in circleVec (position sphere) (radius sphere)

alias Position = Vector2 Numeral
alias Velocity = Vector2 Numeral
alias Color = Vector3 Numeral
alias Radius = Numeral

type Sphere = Sphere Position Velocity Color Radius

color (Sphere _ _ c _) = c

position (Sphere p _ _ _) = p

radius (Sphere _ _ _ r) = r

addSphere spheres =
    let
        pos = Vector2 (unsafeRandom 0 500) (unsafeRandom 0 500)
        vel = Vector2 (unsafeRandom -100 100) (unsafeRandom -100 100)
        col = Vector3 (unsafeRandom 0 255 / 255) (unsafeRandom 0 255 / 255) (unsafeRandom 0 255 / 255)
        rad = unsafeRandom 30 100
    in unsafeInsert spheres (Sphere pos vel col rad)

load _ =
    let
        state = []
        _ = repeatN (fun _ -> addSphere state) 10
    in modifyState (fun _ -> state)

update dt = modifyState (map (updateSphere dt))

updateSphere dt (Sphere p v c r) =
    Sphere (updatePosition p v dt) v c r

updatePosition (Vector2 x y) (Vector2 vx vy) dt =
    let
        nx = (x + vx * dt) % unsafeRun getWidth
        ny = (y + vy * dt) % unsafeRun getHeight
    in Vector2 nx ny

mousepressed = uncurry4 mousepressedC

mousepressedC x y button isTouch =
    modifyState (map (hideSphere (Vector2 x y)))

mousemoved = uncurry5 mousemovedC

mousemovedC x y dx dy isTouch =
    modifyState (map (moveSphere (Vector2 x y)))

moveSphere screenPos (s alias Sphere p v c r) =
    if distance p screenPos < r
        then Sphere screenPos v c r
        else s

hideSphere screenPos (s alias Sphere p v c r) =
    if distance p screenPos < r
        then Sphere p v c 0
        else s

draw _ = modifyState (fun s -> let { _ = map drawSphere s } in s)
