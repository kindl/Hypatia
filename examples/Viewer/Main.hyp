module Viewer.Main

import Native((/), (*), (+), (-),
    Number, Array,
    uncurry2, uncurry5, unsafeIndex)
import Native.Love(polygon)
import Common.Base((>>))
import Viewer.Obj(VTNI, VNI, VTI, VI,
    getFaces, getVertices, getNormals, load)
import Viewer.Obj as Obj
import Geometry.Vector2(Vector2, toArray)
import Geometry.Vector4(Vector4, to2d, normalize)
import Geometry.Matrix(Matrix,
    translateMatrix, scaleMatrix, simpleProjectionMatrix,
    rotationXYZ, multiply, transform)
import Common.Array(map, foldMap)
import Common.Stateful(Ref,
    unsafeMakeRef, unsafeRun, modifyRef, unsafeUnpackRef)


alias Scale = Number

type GameState = MkGameState Number Number Scale

gameState = unsafeMakeRef (MkGameState 0 0 (screenHeight / 4))

modifyState f = unsafeRun (modifyRef gameState f)

onState f = f (unsafeUnpackRef gameState)

model = Obj.load "cube.obj"

screenWidth = 800
screenHeight = 600

speed = 5

translation = translateMatrix (screenWidth / 2) (screenHeight / 2) 0

projection = simpleProjectionMatrix 5000

lightDirection = normalize (Vector4 0 0 1 0)

faces = getFaces model

vertices = getVertices model

getn n = unsafeIndex (n - 1)

getPoint (VTNI v _ _) = getn v vertices
getPoint (VNI v _) = getn v vertices
getPoint (VTI v _) = getn v vertices
getPoint (VI v) = getn v vertices

transformPoint modelview rotation vector =
    let
        rotated = transform rotation vector
        transformed = transform modelview rotated
        projected = transform projection transformed
    in to2d projected

mousemoved = uncurry5 mousemovedC

mousemovedC x y dx dy isTouch = modifyState (\(MkGameState _ _ scale) ->
    let
        rotY = x / screenWidth * speed
        rotX = y / screenHeight * speed
    in MkGameState rotX rotY scale)

wheelmoved = uncurry2 wheelmovedC

// y is either -1 or 1 depending on scroll direction
wheelmovedC _ y = modifyState (\(MkGameState rotX rotY oldScale) ->
    let
        scale = oldScale + y * speed
    in MkGameState rotX rotY scale)

transformFace modelview rotation face =
    map (transformPoint modelview rotation >> getPoint) face

draw _ = onState (\(MkGameState rotX rotY scale) ->
    let
        rotation = rotationXYZ rotX rotY 0
        modelview = multiply translation (scaleMatrix scale)
        points = map (foldMap toArray >> transformFace modelview rotation) faces
    in map (polygon "line") points)

to2d (Vector4 x y _ w) = Vector2 (x / w) (y / w)
