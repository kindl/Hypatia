module Viewer.Main

import Native((/), (*), (+), (-),
    Number, Array,
    uncurry2, uncurry5, unsafeIndex)
import Native.Love(polygon, getWidth, getHeight)
import Common.Base((>>))
import Viewer.Obj(VTNI, VNI, VTI, VI,
    getFaces, getVertices, getNormals, load)
import Viewer.Obj as Obj
import Geometry.Vector2(Vector2, toArray)
import Geometry.Vector3(Vector3)
import Geometry.Vector4(Vector4, to2d, normalize)
import Geometry.Matrix(Matrix,
    translationMatrix, scaleMatrix, simpleProjectionMatrix,
    rotationMatrix, multiply, transform, lookAtMatrix)
import Common.Array(map, foldMap)
import Common.Stateful(Ref,
    unsafeMakeRef, unsafeRun, modifyRef, unsafeUnpackRef)

gameState = unsafeMakeRef (Vector3 0 0 10)

modifyState f = unsafeRun (modifyRef gameState f)

model = Obj.load "assets/cube.obj"

screenWidth = unsafeRun (getWidth)
screenHeight = unsafeRun (getHeight)

speed = 5

screenMatrix =
    Matrix
        screenWidth 0 0 (screenWidth / 2)
        0 screenHeight 0 (screenHeight / 2)
        0 0 1 0
        0 0 0 1

projection = simpleProjectionMatrix 1

lightDirection = normalize (Vector4 0 0 1 0)

faces = getFaces model

vertices = getVertices model

getn n = unsafeIndex (n - 1)

getPoint (VTNI v _ _) = getn v vertices
getPoint (VNI v _) = getn v vertices
getPoint (VTI v _) = getn v vertices
getPoint (VI v) = getn v vertices

transformPoint modelMatrix viewMatrix vertex =
    let
        world = transform modelMatrix vertex
        view = transform viewMatrix world
        viewport = transform projection view
        screen = transform screenMatrix viewport
    in to2d screen

transformFace modelMatrix viewMatrix face =
    map (transformPoint modelMatrix viewMatrix >> getPoint) face

mousemoved = uncurry5 mousemovedC

mousemovedC x y dx dy isTouch = modifyState (\(Vector3 _ _ tr) ->
    let
        rotX = x / screenWidth * speed
        rotY = y / screenHeight * speed
    in Vector3 rotX rotY tr)

wheelmoved = uncurry2 wheelmovedC

// y is either -1 or 1 depending on scroll direction
wheelmovedC _ y = modifyState (\(Vector3 rotX rotY oldTr) ->
    let
        tr = oldTr + y * speed
    in Vector3 rotX rotY tr)

draw _ =
    let
        Vector3 rotX rotY tr = unsafeUnpackRef gameState
        translation = translationMatrix tr 0 0
        rotation = rotationMatrix 0 rotY rotX
        scale = scaleMatrix 1
        modelMatrix = multiply translation (multiply scale rotation)

        viewMatrix = lookAtMatrix (Vector3 0 0 0) (Vector3 1 0 0) (Vector3 0 0 1)

        points = map (foldMap toArray >> transformFace modelMatrix viewMatrix) faces
    in map (polygon "line") points

to2d (Vector4 x y _ w) = Vector2 (x / w) (y / w)
