module Viewer.Main

import Native((/), (*), (+),
    uncurry2, uncurry5, Number, Array)
import Native.Love(polygon)
import Common.Base((>>), getn, pi)
import Viewer.Obj(getFaces, getVertices, getNormals, load,
    VTNI, VNI, VTI, VI)
import Viewer.Obj as Obj
import Geometry.Vector2(Vector2, toArray)
import Geometry.Vector4(Vector4, to2d, normalize)
import Geometry.Matrix(Matrix,
    translateMatrix, scaleMatrix, simpleProjectionMatrix,
    rotationZ, rotationY, rotationX,
    multiply, transform)
import Common.Array(map, foldMap)
import Common.Stateful(Ref, unsafeMakeRef, unsafeRun, modifyRef, unsafeUnpackRef)


alias Points = Array (Array Number)
alias Rotation = Matrix Number
alias Scale = Number

type GameState = MkGameState Points Rotation Scale

gameState = unsafeMakeRef (MkGameState [] (scaleMatrix 1) (screenHeight / 2))

modifyState f = unsafeRun (modifyRef gameState f)

onState f = f (unsafeUnpackRef gameState)

model = Obj.load "cube.obj"

screenWidth = 800
screenHeight = 600
t = translateMatrix (screenWidth / 2) (screenHeight / 2) 0
r = rotationZ pi

projection = simpleProjectionMatrix 5000

lightDirection = normalize (Vector4 0 0 1 0)

faces = getFaces model

vertices = getVertices model

getPoint (VTNI v _ _) = getn v vertices
getPoint (VNI v _) = getn v vertices
getPoint (VTI v _) = getn v vertices
getPoint (VI v) = getn v vertices

transformPoint modelview rotation vector =
    let
        rotated = transform rotation vector
        transformed = transform modelview rotated
        projected = transform projection transformed
        divided = to2d projected
    in divided

mousemoved = uncurry5 mousemovedC

mousemovedC x y dx dy isTouch = modifyState (fun (MkGameState _ _ scale) ->
    let
        rotY = rotationY (x / screenWidth * 5)
        rotX = rotationX (y / screenHeight * 5)
        rotation = multiply rotY rotX
        points = map (foldMap toArray >> transformFace rotation scale) faces
    in MkGameState points rotation scale)

wheelmoved = uncurry2 wheelmovedC

# y is either -1 or 1 depending on scroll direction
wheelmovedC _ y = modifyState (fun (MkGameState _ rotation oldScale) ->
    let
        scale = oldScale + y * 5
        points = map (foldMap toArray >> transformFace rotation scale) faces
    in MkGameState points rotation scale)

transformFace rotation scale face =
    let
        modelview = multiply t (multiply r (scaleMatrix scale))
    in map (transformPoint modelview rotation >> getPoint) face

draw _ = onState (fun (MkGameState ps _ _) -> map (polygon "line") ps)

to2d (Vector4 x y _ w) = Vector2 (x / w) (y / w)
