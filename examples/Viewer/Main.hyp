module Viewer.Main

import Native((/), (*), (+), (-),
    Number, Array,
    uncurry2, uncurry5, unsafeIndex)
import Native.Love(polygon, getWidth, getHeight,
    newImage, newShader, file)
import Common.Base(Unit)
import Viewer.Obj(VTNI, VNI, VTI, VI,
    getFaces, getVertices, getNormals, load)
import Viewer.Obj as Obj
import Geometry.Vector3(Vector3)
import Geometry.Vector4(Vector4, normalize)
import Geometry.Matrix as Matrix
import Geometry.Matrix((@), Matrix,
    simpleProjection, transform, lookAt)
import Common.Array(map, foldMap, nth)
import Common.Stateful(Ref,
    unsafeMakeRef, unsafeRun, modifyRef, unsafeUnpackRef)
import Viewer.Model(toTexturedMesh, drawModel)


gameState = unsafeMakeRef (Vector3 0 0 10)

modifyState f = unsafeRun (modifyRef gameState f)


rotationSpeed = 0.01

scrollSpeed = 5


lightDirection = normalize (Vector4 0 0 1 0)


// Assets
pointData = objToPoints model

model = Obj.load "assets/cube.obj"

meshData = toTexturedMesh model (newImage "assets/texture.png")

basicShader = newShader (file "assets/example.vert")


objToPoints m =
    let
        vertices = getVertices m

        getPoint (VTNI v _ _) = nth v vertices
        getPoint (VNI v _) = nth v vertices
        getPoint (VTI v _) = nth v vertices
        getPoint (VI v) = nth v vertices
    in map (map getPoint) (getFaces m)


drawWireframe viewportMatrix modelMatrix viewMatrix projectionMatrix points =
    let
        combinedMatrix = viewportMatrix @ projectionMatrix @ viewMatrix @ modelMatrix
        transformPoint point = to2d (transform combinedMatrix point)
        transformedPoints = map (foldMap transformPoint) points
    in map (polygon "line") transformedPoints

mousemoved = uncurry5 mousemovedC

mousemovedC x y dx dy isTouch = modifyState (\(Vector3 _ _ translation) ->
    let
        rotX = x * rotationSpeed
        rotY = y * rotationSpeed
    in Vector3 rotX rotY translation)

wheelmoved = uncurry2 wheelmovedC

// y is either -1 or 1 depending on scroll direction
wheelmovedC _ y = modifyState (\(Vector3 rotX rotY oldTranslation) ->
    let
        translation = oldTranslation + y * scrollSpeed
    in Vector3 rotX rotY translation)

draw _ =
    let
        Vector3 rotX rotY tr = unsafeUnpackRef gameState
        translation = Matrix.translation tr 0 0
        rotation = Matrix.rotation 0 rotY rotX
        scale = Matrix.scale 1
        
        projectionMatrix = simpleProjection 1
        modelMatrix = translation @ scale @ rotation
        viewMatrix = lookAt (Vector3 0 0 0) (Vector3 1 0 0) (Vector3 0 0 1)

        screenWidth = unsafeRun (getWidth)
        screenHeight = unsafeRun (getHeight)
        viewportMatrix = Matrix.viewport screenWidth screenHeight

        _ = drawModel modelMatrix viewMatrix projectionMatrix basicShader meshData
        _ = drawWireframe viewportMatrix modelMatrix viewMatrix projectionMatrix pointData
    in Unit

to2d (Vector4 x y _ w) = [(x / w), (y / w)]
