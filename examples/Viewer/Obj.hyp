module Viewer.Obj

import Native(Array, Number, Text,
    toNumber, unsafeIndex)
import Native.Love(file)
import Common.Base((!=))
import Common.Parser(split, words, lines)
import Geometry.Vector4(Vector4)
import Common.Array(filter, map, foldMap)


type VertexIndex
    = VI Number
    | VTI Number Number
    | VNI Number Number
    | VTNI Number Number Number

type ObjElement
    = Vertex (Vector4 Number)
    | TextureCoordinate (Vector4 Number)
    | Normal (Vector4 Number)
    | Face (Array VertexIndex)
    | Comment Text

toFace (Face f) = [f]
toFace _ = []

toVertex (Vertex v) = [v]
toVertex _ = []

toNormal (Normal n) = [n]
toNormal _ = []

toTextureCoordinate (TextureCoordinate t) = [t]
toTextureCoordinate _ = []

getFaces = foldMap toFace
getVertices = foldMap toVertex
getNormals = foldMap toNormal
getTextureCoordinates = foldMap toTextureCoordinate

load filePath = map parseLine (lines (file filePath))

parseLine line =
    let
        splitted = words line
    in case unsafeIndex 0 splitted of
        "v" -> Vertex (readVector splitted)
        "vn" -> Normal (readVector splitted)
        "vt" -> TextureCoordinate (readVector splitted)
        "f" -> Face (map readVI (filter ((!=) "f") splitted))
        _ -> Comment line

readVector [_, v1, v2, v3, v4] =
    Vector4 (toNumber v1) (toNumber v2) (toNumber v3) (toNumber v4)
readVector [_, v1, v2, v3] =
    Vector4 (toNumber v1) (toNumber v2) (toNumber v3) 1
readVector [_, v1, v2] =
    Vector4 (toNumber v1) (toNumber v2) 0 1
readVector [_, v1] =
    Vector4 (toNumber v1) 0 0 1

readVI s = case split "/" s of
    [vi] -> VI (toNumber vi)
    [vi, vt] -> VTI (toNumber vi) (toNumber vt)
    [vi, "", vn] -> VNI (toNumber vi) (toNumber vn)
    [vi, vt, vn] -> VTNI (toNumber vi) (toNumber vt) (toNumber vn)
