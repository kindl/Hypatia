module Viewer.Obj

#A module for parsing obj files

import Native(Array, Number, Text,
    toNumber, unsafeIndex)
import Native.Love(file)
import Common.Base(notEquals, getn)
import Common.Parser(split, words, lines)
import Geometry.Vector4(Vector4)
import Common.Array(filter, map, foldMap)


type VertexIndex
    = VI Number
    | VTI Number Number
    | VNI Number Number
    | VTNI Number Number Number

type ObjElement
    = Vertex (Vector4 Number)
    | TextureCoordinate (Vector4 Number)
    | Normal (Vector4 Number)
    | Face (Array VertexIndex)
    | Comment (Array Text)

toFace (Face f) = [f]
toFace _ = []

toVertex (Vertex v) = [v]
toVertex _ = []

toNormal (Normal n) = [n]
toNormal _ = []

getFaces = foldMap toFace
getVertices = foldMap toVertex
getNormals = foldMap toNormal

# words splits a line at every space
# However "v -1.0 -1.0 -1.0"
# splits into ["v", "-1.0", "-1.0", "-1.0", ""]
# because of an invisible \r at the end. Ouch!
# Therefore the "" is filtered out
parseLine s = matchLine (filter (notEquals "") (words s))

load filePath = map parseLine (lines (file filePath))

matchLine es =
    case unsafeIndex 0 es of
        "v" -> Vertex (readVector es)
        "vn" -> Normal (readVector es)
        "vt" -> TextureCoordinate (readVector es)
        "f" -> Face (map readVI (filter (notEquals "f") es))
        v -> Comment [v]

readVector [_, v1, v2, v3, v4] =
    Vector4 (toNumber v1) (toNumber v2) (toNumber v3) (toNumber v4)
readVector [_, v1, v2, v3] =
    Vector4 (toNumber v1) (toNumber v2) (toNumber v3) 1
readVector [_, v1, v2] =
    Vector4 (toNumber v1) (toNumber v2) 0 1
readVector [_, v1] =
    Vector4 (toNumber v1) 0 0 1

readVI s = case split "/" s of
    [vi] -> VI (toNumber vi)
    [vi, vt] -> VTI (toNumber vi) (toNumber vt)
    [vi, "", vn] -> VNI (toNumber vi) (toNumber vn)
    [vi, vt, vn] -> VTNI (toNumber vi) (toNumber vt) (toNumber vn)
