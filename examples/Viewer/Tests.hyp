module Viewer.Tests

import Native((+), (-), (*), (^), (++),
    print)
import Common.Base((==), (&&), boolToString)
import Common.Parser(words)
import Geometry.Vector4(Vector4, dot)
import Geometry.Matrix(Matrix,
    transpose, multiply, subtract,
    rotationMatrixX, rotationMatrixY,
    rotationMatrixZ, rotationMatrix)
import Common.Array(inspect)
import Viewer.Obj as Obj


testLoad = test "Viewer.Obj.load" (Obj.load "cube.obj")

test name result = print (name ++ " " ++ inspect result)

m1 = Matrix
    2 3 5 7
    11 13 17 19
    23 29 31 37
    41 43 47 53

m2 = Matrix
    59 61 67 71
    73 79 83 89
    97 101 103 107
    109 113 127 131

testTranspose =
    let
        m1t = Matrix
            2 11 23 41
            3 13 29 43
            5 17 31 47
            7 19 37 53
    in test "transpose" (boolToString (transpose m1 == m1t))

testMultiply =
    let
        m = Matrix
            1585 1655 1787 1861
            5318 5562 5980 6246
            10514 11006 11840 12378
            15894 16634 17888 18710
    in test "multiply" (boolToString (multiply m1 m2 == m))

testDot =
    let
        v1 = Vector4 2 3 5 7
        v2 = Vector4 11 13 17 19
    in test "dot prod" (boolToString (dot v1 v2 == 279))

testPrecedence =
    let
        v1 = 5 + 3 * 4
        v2 = 3 * 4 + 5
    in test "precedence" (boolToString (v1 == v2))

testAssocL =
    let
        v1 = 2 - 3 - 4 - 5
        v2 = -10
    in test "assocL" (boolToString (v1 == v2))

testAssocR =
    let
        v1 = 2 ^ 2 ^ 2 ^ 2
        v2 = 65536
    in test "assocR" (boolToString (v1 == v2))

testParens1 =
    let
        v1 = (2 * 3) + (5 * 7)
        v2 =  2 * 3  +  5 * 7
    in test "parens 1" (boolToString (v1 == v2))

testParens2 =
    let
        v1 = (2 * 3) + (5 * 7) + (11 * 13) #is 184
        v2 =  2 * 3  +  5 * 7  +  11 * 13  #is 219
    in test "parens 2" (boolToString (v1 == v2))

testNegate =
    let { x = 5 } in
        test "negate" (case -x of {
            -5 -> "true";
            _ -> "false"})

testEq =
    let
        m = Matrix
            2 3 5 7
            11 13 17 19
            23 29 31 37
            41 43 47 53
    in test "eq" (boolToString (m1 == m))

testRight = test "should be true" (m1 == m1)
testWrong = test "should be false" (m1 == m2)
testInspect = test "inspect" (multiply m2 m1)

testWords =
    let
        general = words " \nHello Little Wörld! " == ["Hello", "Little", "Wörld!"]
        empty1 = words "" == []
        empty2 = words " \n" == []
    in test "words should be true" (general && empty1 && empty2)

testMultiplyAssoc =
    let
        x = 101
        y = 151
        z = 11
        combined1 = multiply (multiply (rotationMatrixX x) (rotationMatrixY y)) (rotationMatrixZ z)
        combined2 = multiply (rotationMatrixX x) (multiply (rotationMatrixY y) (rotationMatrixZ z))
    in test "matrix multiply all should be almost 0" (subtract combined1 combined2)

testRotate =
    let
        x = 101
        y = 151
        z = 11
        combined1 = multiply (multiply (rotationMatrixX x) (rotationMatrixY y)) (rotationMatrixZ z)
        combined2 = rotationMatrix x y z
    in test "matrix rotate all should be almost 0" (subtract combined1 combined2)
