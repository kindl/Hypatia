module Common.Base

import Native(Number, Text, Array, Bool,
    (^), (-), (+), (&&), (||),
    unsafeIndex, length, isArray, unsafeCoerce,
    eq, ne, lt, gt, le, ge,
    True, False)

sqrt x = x ^ 0.5

pi = 3.141592653589793

// Comparisons
infix 4 == equals
infix 4 != notEquals
infix 4 < lessThan
infix 4 > greaterThan
infix 4 <= lessThanOrEqual
infix 4 >= greaterThanOrEqual

equals l r = genComp eq l r

notEquals l r = genComp ne l r

lessThan l r = genComp lt l r

greaterThan l r = genComp gt l r

lessThanOrEqual l r = genComp le l r

greaterThanOrEqual l r = genComp ge l r

// Generic comparison
genComp comp l r =
    // genComp has to be passed recursively for nested datatypes
    comp l r || trySeqComp (genComp comp) l r

trySeqComp comp l r =
    isArray l && isArray r && seqComp comp (toArray l) (toArray r)
    where
        toArray : a -> Array b
        toArray = unsafeCoerce

seqComp comp l r =
    let
        lengthOfL = length l
        lengthOfR = length r
    in eq lengthOfL lengthOfR && seqCompAux comp 0 lengthOfL l r

seqCompAux comp i maxN l r =
    eq i maxN
    || (comp (unsafeIndex i l) (unsafeIndex i r) && seqCompAux comp (i + 1) maxN l r)

min a b = if a <= b then a else b

max a b = if a <= b then b else a

sign a = if a < 0 then -1 else if a > 0 then 1 else 0

repeatN f n =
    if eq n 0 then Unit
        else let { _ = f Unit } in repeatN f (n - 1)

not True = False
not False = True

boolToString False = "False"
boolToString True = "True"


type Unit = Unit

type Tuple2 a b = Tuple2 a b

type Tuple3 a b c = Tuple3 a b c

type Tuple4 a b c d = Tuple4 a b c d

type Tuple5 a b c d e = Tuple5 a b c d e

first f (Tuple2 a b) = Tuple2 (f a) b


// Functions
fix f x = f (fix f) x

flip f x y = f y x

identity x = x

infixr 0 <| apply

apply f x = f x

infixl 0 |> reverseApply

reverseApply x f = f x

infixr 9 >> compose

compose f g x = f (g x)

infixr 9 << reverseCompose

reverseCompose = flip compose

always x _ = x

alwaysSecond _ x = x
