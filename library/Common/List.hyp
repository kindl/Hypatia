module Common.List

import Native((+), (-), unsafeInsert)


type List a = Empty | Element a (List a)

map f Empty = Empty
map f (Element e es) = Element (f e) (map f es)

length (Element _ es) = 1 + length es
length Empty = 0

append Empty xs = xs
append (Element e es) xs = Element e (append es xs)

filter _ Empty = Empty
filter p (Element e es) =
    if p e then Element e (filter p es) else filter p es

foldr _ z Empty = z
foldr f z (Element x xs) = f x (foldr f z xs)

foldl f z Empty = z
foldl f z (Element x xs) = foldl f (f z x) xs

foldMap f = foldl (\z e -> append z (f e)) Empty

listToArray = foldl unsafeInsert []

index 0 (Element e _) = e
index n (Element _ es) = index (n - 1) es
